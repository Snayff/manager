from __future__ import annotations

from abc import ABC, abstractmethod
from typing import TYPE_CHECKING, Type

import pygame
from pygame_gui.elements import UIButton, UILabel, UIPanel, UITextBox, UITextEntryLine

from scripts.constants import LINE_BREAK

if TYPE_CHECKING:
    from typing import Union, Optional, Any, Tuple, Dict, List, Callable
    from pygame_gui import UIManager
    from pygame.rect import Rect
    from pygame_gui.core import UIElement


class Screen(ABC):
    def __init__(self, manager: UIManager, rect: Rect):
        self.manager: UIManager = manager
        self.rect: Rect = rect
        self.elements: Dict[str, UIElement] = {}
        self.options: Dict[str, Tuple[str, Callable]] = {}

        # default details
        self.start_y = 10
        self.start_x = 50
        self.line_height = 30
        self.header_width = rect.width
        self.header_height = 100
        self.button_x = self.start_x + 5
        self.button_width = 150
        self.button_height = self.line_height
        self.choice_x = self.button_x
        self.choice_bottom_offset = 10
        self.choice_width = 200
        self.choice_height = self.line_height + 10
        self.text_width = rect.width - (self.start_x + self.button_width)
        self.max_section_height = rect.height - (self.start_y + self.header_height + self.choice_height +
                                                 self.choice_bottom_offset)

    @abstractmethod
    def handle_event(self, event: pygame.event.Event):
        """
        Process events generated by this element.
        """
        pass

    def kill(self):
        """
        Delete all elements from self.elements
        """
        elements = self.elements
        for name, element in elements.items():
            element.kill()
        self.elements = {}

    def create_info_section(self, x: int, y: int, width: int, height: int, text: str):
        """
        Create an information section on the screen. Called "info".
        """
        info_text = UITextBox(text, Rect((x, y), (width, height)), self.manager, False, 1)
        self.elements["info"] = info_text

    def create_option_section(self, button_x: int, text_x: int, y: int, button_width: int, button_height: int,
                                text_width: int, text_height: int):
        """
        Create an options section. Uses self.options. Creates a panel to contains buttons and text box. "panel",
        [option_number] and "options". 
        """
        line_height = self.line_height

        # offsets for alignment
        offset_y = 0
        count = 1

        # to hold string from list
        options_text = ""

        # create panel to hold it all
        panel = UIPanel(Rect((button_x, y), (button_width + text_width, text_height)), 1, self.manager)
        self.elements["panel"] = panel

        # loop options and extract text and id
        for _id, (text, _method) in self.options.items():
            options_text += text + LINE_BREAK
            option_button = UIButton(Rect((button_x, y + offset_y), (button_width, button_height)),
                                     str(count), self.manager, object_id=_id, parent_element=panel)
            count += 1
            offset_y += line_height
            self.elements[_id] = option_button

        # add text to textbox
        options_text = UITextBox(options_text, Rect((text_x, y), (text_width, text_height)), self.manager, False, 1,
                                 parent_element=panel)
        self.elements["options"] = options_text

    def create_header(self, text: str):
        """
        Create the header section. Uses default settings. Called "header"
        """
        header = UILabel(Rect((self.start_x, self.start_y), (self.header_width, self.header_height)), text,
                         self.manager)
        self.elements["header"] = header

    def create_choice_field(self):
        """
        Create the choice input field. Uses default settings. Called "choice".
        """
        rect = Rect((self.choice_x, self.choice_bottom_offset), (self.choice_width, self.choice_width))
        choice = UITextEntryLine(rect, self.manager, object_id="overview_choice",
                                 anchors={
                                     "left": "left",
                                     "right": "left",
                                     "top": "bottom",
                                     "bottom": "bottom"
                                 })
        self.elements["choice"] = choice
